#include "HttpConnection.h"
#include "LogicSystem.h"
HttpConnection::HttpConnection(boost::asio::io_context& ioc) : _socket(ioc) {
	//socket没有拷贝构造，使用移动构造
}
void HttpConnection::Start() {
	auto self = shared_from_this();
	http::async_read(_socket, _buffer, _request, [self](beast::error_code ec, std::size_t bytes_transferred) {
		try {
			if (ec) {
				//ec可以当作bool使用，重载了operator bool()
				std::cout << "http read err is" << ec.what() << std::endl;
				return;
			}

			boost::ignore_unused(bytes_transferred);
			//
			self->HandleReq();
			//处理请求
			self->CheckDeadline();
			//超时检测
		}
		catch (std::exception& exp) {
			std::cout << "exception is" << exp.what() << std::endl;
		}
		});
}

unsigned char ToHex(unsigned char x)
{
	//10转16
	return  x > 9 ? x + 55 : x + 48;
}

unsigned char FromHex(unsigned char x)
{
	//16转10
	unsigned char y;
	if (x >= 'A' && x <= 'Z') y = x - 'A' + 10;
	else if (x >= 'a' && x <= 'z') y = x - 'a' + 10;
	else if (x >= '0' && x <= '9') y = x - '0';
	else assert(0);
	return y;
}

std::string UrlEncode(const std::string& str)
{	//编码
	std::string strTemp = "";
	size_t length = str.length();
	for (size_t i = 0; i < length; i++)
	{
		//判断是否仅有数字和字母构成
		if (isalnum((unsigned char)str[i]) ||
			(str[i] == '-') ||
			(str[i] == '_') ||
			(str[i] == '.') ||
			(str[i] == '~'))
			strTemp += str[i];
		else if (str[i] == ' ') //为空字符
			strTemp += "+";//假设为+，到时候删除解析
		else
		{
			//其他字符需要提前加%并且高四位和低四位分别转为16进制
			strTemp += '%';
			strTemp += ToHex((unsigned char)str[i] >> 4);
			//高四位
			strTemp += ToHex((unsigned char)str[i] & 0x0F);
			//低四位
		}
	}
	return strTemp;
}

std::string UrlDecode(const std::string& str)
{	//解码
	std::string strTemp = "";
	size_t length = str.length();
	for (size_t i = 0; i < length; i++)
	{
		//还原+为空
		if (str[i] == '+') strTemp += ' ';
		//遇到%将后面的两个字符从16进制转为char再拼接
		else if (str[i] == '%')
		{
			assert(i + 2 < length);
			unsigned char high = FromHex((unsigned char)str[++i]);
			unsigned char low = FromHex((unsigned char)str[++i]);
			strTemp += high * 16 + low;
		}
		else strTemp += str[i];
	}
	return strTemp;
}

void HttpConnection::PreParseGetParam() {
	// 提取 URI  
	auto uri = _request.target();
	// 查找查询字符串的开始位置（即 '?' 的位置）  
	auto query_pos = uri.find('?');
	if (query_pos == std::string::npos) {
		//没有则直接赋值给url
		_get_url = uri;
		return;
	}

	_get_url = uri.substr(0, query_pos);
	std::string query_string = uri.substr(query_pos + 1);
	std::string key;
	std::string value;
	size_t pos = 0;
	while ((pos = query_string.find('&')) != std::string::npos) {
		auto pair = query_string.substr(0, pos);
		size_t eq_pos = pair.find('=');
		if (eq_pos != std::string::npos) {
			key = UrlDecode(pair.substr(0, eq_pos)); // url_decode 函数来处理URL解码  
			value = UrlDecode(pair.substr(eq_pos + 1));
			_get_params[key] = value;
		}
		query_string.erase(0, pos + 1);
	}
	// 处理最后一个参数对（如果没有 & 分隔符）  
	if (!query_string.empty()) {
		size_t eq_pos = query_string.find('=');
		if (eq_pos != std::string::npos) {
			key = UrlDecode(query_string.substr(0, eq_pos));
			value = UrlDecode(query_string.substr(eq_pos + 1));
			_get_params[key] = value;
		}
	}
}
void HttpConnection::HandleReq() {
	//设置版本
	_response.version(_request.version());
	//设置短链接不需要保活
	_response.keep_alive(false);
	//处理http的get请求
	if (_request.method() == http::verb::get) {
		PreParseGetParam();
		bool success = LogicSystem::GetInstance()->HandleGet(_get_url, shared_from_this());
		//根据路由处理回调
		if (!success) {
			_response.result(http::status::not_found);
			//失败原因
			_response.set(http::field::content_type, "text/plain");
			//回应给对方设置的回应头，回报告诉对方的类型，如文本/二进制;
			beast::ostream(_response.body()) << "url not found\r\n";
			//回包 强制给body构造ostream并绑定
			WriteResponse();
			return;

		}
		//成功
		_response.result(http::status::ok);
		_response.set(http::field::server, "GateServer");
		//告诉对方是哪个服务回给他的
		WriteResponse();
		return;
	}

	if (_request.method() == http::verb::post) {
		bool success = LogicSystem::GetInstance()->HandlePost(_request.target(), shared_from_this());
		//根据路由处理回调
		if (!success) {
			_response.result(http::status::not_found);
			//失败原因
			_response.set(http::field::content_type, "text/plain");
			//回应给对方设置的回应头，回报告诉对方的类型，如文本/二进制;
			beast::ostream(_response.body()) << "url not found\r\n";
			//回包 强制给body构造ostream并绑定
			WriteResponse();
			return;

		}
		//成功
		_response.result(http::status::ok);
		_response.set(http::field::server, "GateServer");
		//告诉对方是哪个服务回给他的
		WriteResponse();
		return;
	}
}
void HttpConnection::WriteResponse() {
	auto self = shared_from_this();
	_response.content_length(_response.body().size());
	//http底层帮助切包
	http::async_write(_socket, _response, [self](beast::error_code ec, std::size_t bytes_transferred) {
		self->_socket.shutdown(tcp::socket::shutdown_send, ec);
		//shutdown关掉一段,关闭发送端即可
		//当shutdown发送长时间没有触发回调，定时器一直检测直到超时，不触发的情况下使用_socket强制关闭
		self->deadline_.cancel();
		//deadline定时器，cancel取消
		});
}
void HttpConnection::CheckDeadline() {
	auto self = shared_from_this();
	deadline_.async_wait([self](beast::error_code ec) {
		if (!ec) {
			//没出错关了
			self->_socket.close(ec);
			//出错也不用关
		}
		});
	//定时器用法类似socket 定时器为定时事件，
}